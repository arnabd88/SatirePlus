Namespace(compress=False, enable_abstraction=False, file='../tests/test1.txt', force=False, logfile='default.log', maxdepth=40, mindepth=20, outfile='outfile.txt', parallel=False, simplify=False, sound=False, std=False)
Inside Program
Scope creattion: ID =  0
INPUTS INPUTS INPUTS
SLPAREN SLPAREN {
ID ID x1
FPTYPE FPTYPE fl64
COLON COLON :
LPAREN LPAREN (
FLOAT FLOAT 0.01
COMMA COMMA ,
FLOAT FLOAT 0.1
RPAREN RPAREN )
SEMICOLON SEMICOLON ;
ID ID x2
FPTYPE FPTYPE fl64
COLON COLON :
LPAREN LPAREN (
FLOAT FLOAT 0.01
COMMA COMMA ,
FLOAT FLOAT 0.1
RPAREN RPAREN )
SEMICOLON SEMICOLON ;
ID ID x3
FPTYPE FPTYPE fl64
COLON COLON :
LPAREN LPAREN (
FLOAT FLOAT 0.01
COMMA COMMA ,
FLOAT FLOAT 0.1
RPAREN RPAREN )
SEMICOLON SEMICOLON ;
ID ID x4
FPTYPE FPTYPE fl64
COLON COLON :
LPAREN LPAREN (
FLOAT FLOAT 0.01
COMMA COMMA ,
FLOAT FLOAT 0.1
RPAREN RPAREN )
SEMICOLON SEMICOLON ;
SRPAREN SRPAREN }
OUTPUTS OUTPUTS OUTPUTS
SLPAREN SLPAREN {
ID ID y
SEMICOLON SEMICOLON ;
SRPAREN SRPAREN }
EXPRS EXPRS EXPRS
SLPAREN SLPAREN {
ID ID g
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
ID ID x2
MUL MUL *
LPAREN LPAREN (
ID ID x1
MUL MUL *
ID ID x1
RPAREN RPAREN )
SEMICOLON SEMICOLON ;
ID ID h
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
ID ID x2
MUL MUL *
LPAREN LPAREN (
ID ID x3
PLUS PLUS +
ID ID x4
RPAREN RPAREN )
SEMICOLON SEMICOLON ;
ID ID i
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
FLOAT FLOAT 4.0
SEMICOLON SEMICOLON ;
ID ID j
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
FLOAT FLOAT 6.0
SEMICOLON SEMICOLON ;
IF IF if
Scope creattion: ID =  1
LPAREN LPAREN (
LPAREN LPAREN (
ID ID x1
MINUS MINUS -
ID ID x2
RPAREN RPAREN )
LT LT <
FLOAT FLOAT 0.4
RPAREN RPAREN )
AND AND &&
LPAREN LPAREN (
LPAREN LPAREN (
ID ID x3
MUL MUL *
ID ID x3
MUL MUL *
ID ID x3
RPAREN RPAREN )
LT LT <
FLOAT FLOAT 0.0
RPAREN RPAREN )
THEN THEN then
IF IF if
Scope creattion: ID =  2
LPAREN LPAREN (
ID ID i
LT LT <
FLOAT FLOAT 50.0
RPAREN RPAREN )
AND AND &&
LPAREN LPAREN (
ID ID i
MINUS MINUS -
ID ID j
LT LT <
FLOAT FLOAT 0.0
RPAREN RPAREN )
THEN THEN then
ID ID y1
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
ID ID x1
DIV DIV /
ID ID x2
SEMICOLON SEMICOLON ;
ELSE ELSE else
Scope creattion: ID =  3
ID ID y1
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
ID ID g
SEMICOLON SEMICOLON ;
ENDIF ENDIF endif
Stack: deque([(0,), (1,), (2, 3)])
Stack: deque([(0,), (1,)])
1 2
ELSE ELSE else
Scope creattion: ID =  4
ID ID y1
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
ID ID h
SEMICOLON SEMICOLON ;
ENDIF ENDIF endif
Stack: deque([(0,), (1, 4)])
Stack: deque([(0,)])
0 1
ID ID y
FPTYPE FPTYPE rnd64
ASSIGN ASSIGN =
ID ID y1
PLUS PLUS +
ID ID x1
SEMICOLON SEMICOLON ;
SRPAREN SRPAREN }
{x1: ((<ASTtypes.FreeVar object at 0x7f8386782a70>, True),), x2: ((<ASTtypes.FreeVar object at 0x7f8386782ad8>, True),), x3: ((<ASTtypes.FreeVar object at 0x7f8386782b40>, True),), x4: ((<ASTtypes.FreeVar object at 0x7f8386782ba8>, True),), g: ((<ASTtypes.BinOp object at 0x7f8386782c78>, True),), h: ((<ASTtypes.BinOp object at 0x7f8386782d48>, True),), i: ((<ASTtypes.Num object at 0x7f8386782db0>, True),), j: ((<ASTtypes.Num object at 0x7f8386782e18>, True),), y1: ((<ASTtypes.LiftOp object at 0x7f83867896d8>, ~CS1 | (CS1 & (CS2 | ~CS2))),), y: ((<ASTtypes.BinOp object at 0x7f83867af388>, True),)}
0
True
Pre : 10
Post : 10
Total number of nodes pre-processing: 8
Total number of nodes post-processing: 8
maxdepth =  5
0 FreeVar True
Tup( (Expr: x1 , Cond : True) ) 

0 FreeVar True
Tup( (Expr: x2 , Cond : True) ) 

1 BinOp True
Tup( (Expr: x1/x2 , Cond : True) ) 

0 FreeVar True
Tup( (Expr: x2 , Cond : True) ) 

0 FreeVar True
Tup( (Expr: x1 , Cond : True) ) 

0 FreeVar True
Tup( (Expr: x1 , Cond : True) ) 

1 BinOp True
Tup( (Expr: x1**2 , Cond : True) ) 

2 BinOp True
Tup( (Expr: x2*x1**2 , Cond : True) ) 

3 LiftOp True
Tup( (Expr: x1/x2 , Cond : CS2),(Expr: x2*x1**2 , Cond : ~CS2) ) 

0 FreeVar True
Tup( (Expr: x2 , Cond : True) ) 

0 FreeVar True
Tup( (Expr: x3 , Cond : True) ) 

0 FreeVar True
Tup( (Expr: x4 , Cond : True) ) 

1 BinOp True
Tup( (Expr: x3 + x4 , Cond : True) ) 

2 BinOp True
Tup( (Expr: x2*x3 + x2*x4 , Cond : True) ) 

4 LiftOp True
Tup( (Expr: x1/x2 , Cond : CS1 & CS2 & (CS2 | ~CS2)),(Expr: x2*x1**2 , Cond : CS1 & ~CS2 & (CS2 | ~CS2)),(Expr: x2*x3 + x2*x4 , Cond : ~CS1) ) 

0 FreeVar True
Tup( (Expr: x1 , Cond : True) ) 

5 BinOp True
Tup( (Expr: x1 + x1/x2 , Cond : CS1 & CS2),(Expr: x1 + x2*x1**2 , Cond : CS1 & ~CS2),(Expr: x1 + x2*x3 + x2*x4 , Cond : ~CS1) ) 

Begin building derivatives

Finish building derivatives

dict_keys([x1, x2, x3, x4, g, h, i, j, y1, y])
Tup( (Expr: 1.0 , Cond : True) ) Tup( (Expr: x1/x2 , Cond : CS1 & CS2 & (CS2 | ~CS2)),(Expr: x2*x1**2 , Cond : CS1 & ~CS2 & (CS2 | ~CS2)),(Expr: x2*x3 + x2*x4 , Cond : ~CS1) )
x1 Tup( (Expr: 1.0 , Cond : True),(Expr: 1.0/x2 , Cond : CS1 & CS2),(Expr: 1.0*x2*x1 , Cond : CS1 & ~CS2),(Expr: 1.0*x2*x1 , Cond : CS1 & ~CS2) )
x2 Tup( (Expr: 0.0 + 1.0*x3 + 1.0*x4 , Cond : ~CS1),(Expr: 1.0*x1**2 , Cond : CS1 & ~CS2),(Expr: -1.0*x1/x2**2 , Cond : CS1 & CS2) )
x3 Tup( (Expr: 1.0*x2 , Cond : ~CS1) )
x4 Tup( (Expr: 1.0*x2 , Cond : ~CS1) )
Full time : 0.019685983657836914
