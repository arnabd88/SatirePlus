## Given Sphere s and Point p, update s (if needed) to just encompass p
##-------------
## pseducode  ||
##-------------
## struct Sphere { Point c ; float r; }
## struct Point { float x; float y; float z;}
## void SphereOfSphereAndPt(Sphere &s, Point &p)
## {
## 	Vector d = p - s.c ;     // [dx,dy,dz] = [px-cx, py-cy, pz-cz]
## 	float dist2 = Dot(d,d);  // dist2 = dx*dx + dy*dy + dz*dz
## 
## 	if (dist2 > s.r * s.r) {   
## 		float dist = Sqrt(dist2);
## 		float newRadius = (s.r + dist) * 0.5f ;
## 		float k = (newRadius - s.r) / dist ;
## 		s.r = newRadius ;
## 		s.c += d*k;
## 	}
## }

INPUTS {
	px0 fl64 : (0.5, 1.5)	;
	py0 fl64 : (0.5, 1.5)	;
	pz0 fl64 : (0.5, 1.5)	;
	px1 fl64 : (0.5, 1.5)	;
	py1 fl64 : (0.5, 1.5)	;
	pz1 fl64 : (0.5, 1.5)	;
	px2 fl64 : (0.5, 1.5)	;
	py2 fl64 : (0.5, 1.5)	;
	pz2 fl64 : (0.5, 1.5)	;
	cx0 fl64 : (5.5, 6.5)	;
	cy0 fl64 : (4.5, 6.5)	;
	cz0 fl64 : (6.5, 7.0)	;
}

OUTPUTS {
	#newRadius ; dist2 ;
	#new_cx ; new_cy ; new_cz ;
	radius ;
}

EXPRS {
	radius = 2.5 ;
	cx = cx0 ;
	cy = cy0 ;
	cz = cz0 ;

	##
	dx = px0 - cx ;
	dy = py0 - cy ;
	dz = pz0 - cz ;

	dist2 = dx*dx + dy*dy + dz*dz ;

	if (dist2 > (radius*radius) ) then
		dist = sqrt(dist2) ;
		newRadius = (radius + dist) + 0.5 ;
		k = (newRadius - radius)/dist ;
		cx = cx + dx*k ;
		cy = cy + dy*k ;
		cz = cz + dz*k ;
		radius = newRadius ;
	endif

	##
	#dx = px1 - cx ;
	#dy = py1 - cy ;
	#dz = pz1 - cz ;

	#dist2 = dx*dx + dy*dy + dz*dz ;

	#if (dist2 > (radius*radius) ) then
	#	dist = sqrt(dist2) ;
	#	newRadius = (radius + dist) + 0.5 ;
	#	k = (newRadius - radius)/dist ;
	#	cx = cx + dx*k ;
	#	cy = cy + dy*k ;
	#	cz = cz + dz*k ;
	#	radius = newRadius ;
	#endif

}
