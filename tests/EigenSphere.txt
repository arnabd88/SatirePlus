## Necessary to operate over conditionals
## Otherwise will cause div by zero errors

INPUTS {

	px0 fl64  :	(1.0 - 0.1, 1.0 + 0.1);
	py0 fl64  :	(1.0 - 0.1, 1.0 + 0.1);
	pz0 fl64  :	(1.0 - 0.1, 1.0 + 0.1);
	px1 fl64  :	(2.5 - 0.1, 2.5 + 0.1);
	py1 fl64  :	(2.5 - 0.1, 2.5 + 0.1);
	pz1 fl64  :	(2.5 - 0.1, 2.5 + 0.1);
	px2 fl64  :	(1.2 - 0.1, 1.2 + 0.1);
	py2 fl64  :	(1.2 - 0.1, 1.2 + 0.1);
	pz2 fl64  :	(1.2 - 0.1, 1.2 + 0.1);
	px3 fl64  :	(3.2 - 0.1, 3.2 + 0.1);
	py3 fl64  :	(3.2 - 0.1, 3.2 + 0.1);
	pz3 fl64  :	(3.2 - 0.1, 3.2 + 0.1);
	px4 fl64  :	(2.1, 2.3);
	py4 fl64  :	(2.1, 2.3);
	pz4 fl64  :	(2.1, 2.3);

}

OUTPUTS {
	c; #m_2_1 ;
}


EXPRS {
	
	numPts int = 5 ;

	## Covariance matrix block : Covariance(m, pt, numPts)
		cx = (px0 + px1 + px2 + px3 + px4)/numPts ;
		cy = (py0 + py1 + py2 + py3 + py4)/numPts ;
		cz = (pz0 + pz1 + pz2 + pz3 + pz4)/numPts ;


		e00 = 0.0 ; e11 = 0.0 ; e22 = 0.0 ; e01 = 0.0 ; e02 = 0.0 ; e12 = 0.0 ;

		px = px0 - cx ;
		py = py0 - cy ;
		pz = pz0 - cz ;
		e00 = e00 + px*px ;
		e11 = e11 + py*py ;
		e22 = e22 + pz*pz ;
		e01 = e01 + px*py ;
		e02 = e02 + px*pz ;
		e12 = e12 + py*pz ;

		px = px1 - cx ;
		py = py1 - cy ;
		pz = pz1 - cz ;
		e00 = e00 + px*px ;
		e11 = e11 + py*py ;
		e22 = e22 + pz*pz ;
		e01 = e01 + px*py ;
		e02 = e02 + px*pz ;
		e12 = e12 + py*pz ;

		px = px2 - cx ;
		py = py2 - cy ;
		pz = pz2 - cz ;
		e00 = e00 + px*px ;
		e11 = e11 + py*py ;
		e22 = e22 + pz*pz ;
		e01 = e01 + px*py ;
		e02 = e02 + px*pz ;
		e12 = e12 + py*pz ;

		px = px3 - cx ;
		py = py3 - cy ;
		pz = pz3 - cz ;
		e00 = e00 + px*px ;
		e11 = e11 + py*py ;
		e22 = e22 + pz*pz ;
		e01 = e01 + px*py ;
		e02 = e02 + px*pz ;
		e12 = e12 + py*pz ;

		px = px4 - cx ;
		py = py4 - cy ;
		pz = pz4 - cz ;
		e00 = e00 + px*px ;
		e11 = e11 + py*py ;
		e22 = e22 + pz*pz ;
		e01 = e01 + px*py ;
		e02 = e02 + px*pz ;
		e12 = e12 + py*pz ;

		## Fill the covariance matrix elements
		m_0_0 = e00 / numPts ;
		m_1_1 = e11 / numPts ;
		m_2_2 = e22 / numPts ;
		m_0_1 = e01 / numPts ;
		m_1_0 = e01 / numPts ;
		m_0_2 = e02 / numPts ;
		m_2_0 = e02 / numPts ;
		m_1_2 = e12 / numPts ;
		m_2_1 = e12 / numPts ;

	
	## Jacobi : Jacobi(m, v)

		v_0_0 = 1.0;
		v_0_1 = 0.0;
		v_0_2 = 0.0;
		v_1_0 = 0.0;
		v_1_1 = 1.0;
		v_1_2 = 0.0;
		v_2_0 = 0.0;
		v_2_1 = 0.0;
		v_2_2 = 1.0;

		#r = (m_2_2 - m_1_1) / (2.0 * m_1_2) ;
		#t = 1.0 / ( r + sqrt(1.0 + r*r));
		#c = 1.0 / (sqrt(1.0 + t*t)) ;
		#s = t * c ;
		if (( m_1_2 > 0 && m_1_2 > 0.0001 ) || ( m_1_2 < 0 && -1*m_1_2 > 0.0001)) then
			
			r = (m_2_2 - m_1_1) / (2.0 * m_1_2) ;

			if ( r >= 0.0 ) then
				t = 1.0 / ( r + sqrt(1.0 + r*r));
			else
				t = -1*(1.0 / (sqrt(1.0 + r*r) - r));
			endif

			c = 1.0 / (sqrt(1.0 + t*t)) ;
			s = t * c ;
		else
			c = 1.0 ;
			s = 0.0 ;
		endif
#
#		J_0_0 = 1.0;
#		J_0_1 = 0.0;
#		J_0_2 = 0.0;
#		J_1_0 = 0.0;
#		J_1_1 = 1.0;
#		J_1_2 = 0.0;
#		J_2_0 = 0.0;
#		J_2_1 = 0.0;
#		J_2_2 = 1.0;
#
#		J_1_1 = c ;
#		J_1_2 = s ;
#		J_2_1 = -1*s ;
#		J_2_2 = c ;
#
#		# vl = v * J
#		v_0_0 = v_0_0 * J_0_0 + v_0_1 * J_1_0 + v_0_2 * J_2_0 ;
#		v_0_1 = v_0_0 * J_0_1 + v_0_1 * J_1_1 + v_0_2 * J_2_1 ;
#		v_0_2 = v_0_0 * J_0_2 + v_0_1 * J_1_2 + v_0_2 * J_2_2 ;
#		v_1_0 = v_1_0 * J_0_0 + v_1_1 * J_1_0 + v_1_2 * J_2_0 ;
#		v_1_1 = v_1_0 * J_0_1 + v_1_1 * J_1_1 + v_1_2 * J_2_1 ;
#		v_1_2 = v_1_0 * J_0_2 + v_1_1 * J_1_2 + v_1_2 * J_2_2 ;
#		v_2_0 = v_2_0 * J_0_0 + v_2_1 * J_1_0 + v_2_2 * J_2_0 ;
#		v_2_1 = v_2_0 * J_0_1 + v_2_1 * J_1_1 + v_2_2 * J_2_1 ;
#		v_2_2 = v_2_0 * J_0_2 + v_2_1 * J_1_2 + v_2_2 * J_2_2 ;
#
#		# jta = (J.transpose() * a)
#		jtm_0_0 = J_0_0 * m_0_0 + J_1_0 * m_1_0 + J_2_0 * m_2_0 ;
#		jtm_0_1 = J_0_0 * m_0_1 + J_1_0 * m_1_1 + J_2_0 * m_2_1 ;
#		jtm_0_2 = J_0_0 * m_0_2 + J_1_0 * m_1_2 + J_2_0 * m_2_2 ;
#		jtm_1_0 = J_0_1 * m_0_0 + J_1_1 * m_1_0 + J_2_1 * m_2_0 ;
#		jtm_1_1 = J_0_1 * m_0_1 + J_1_1 * m_1_1 + J_2_1 * m_2_1 ;
#		jtm_1_2 = J_0_1 * m_0_2 + J_1_1 * m_1_2 + J_2_1 * m_2_2 ;
#		jtm_2_0 = J_0_2 * m_0_0 + J_1_2 * m_1_0 + J_2_2 * m_2_0 ;
#		jtm_2_1 = J_0_2 * m_0_1 + J_1_2 * m_1_1 + J_2_2 * m_2_1 ;
#		jtm_2_2 = J_0_2 * m_0_2 + J_1_2 * m_1_2 + J_2_2 * m_2_2 ;
#
#		m_0_0 = jtm_0_0 * J_0_0 + jtm_0_1 * J_1_0 + jtm_0_2 * J_2_0 ;
#		m_0_1 = jtm_0_0 * J_0_1 + jtm_0_1 * J_1_1 + jtm_0_2 * J_2_1 ;
#		m_0_2 = jtm_0_0 * J_0_2 + jtm_0_1 * J_1_2 + jtm_0_2 * J_2_2 ;
#		m_1_0 = jtm_1_0 * J_0_0 + jtm_1_1 * J_1_0 + jtm_1_2 * J_2_0 ;
#		m_1_1 = jtm_1_0 * J_0_1 + jtm_1_1 * J_1_1 + jtm_1_2 * J_2_1 ;
#		m_1_2 = jtm_1_0 * J_0_2 + jtm_1_1 * J_1_2 + jtm_1_2 * J_2_2 ;
#		m_2_0 = jtm_2_0 * J_0_0 + jtm_2_1 * J_1_0 + jtm_2_2 * J_2_0 ;
#		m_2_1 = jtm_2_0 * J_0_1 + jtm_2_1 * J_1_1 + jtm_2_2 * J_2_1 ;
#		m_2_2 = jtm_2_0 * J_0_2 + jtm_2_1 * J_1_2 + jtm_2_2 * J_2_2 ;
#
#		off = m_0_1 * m_0_1 + m_0_2 * m_0_2 + m_1_0 * m_1_0 + m_1_2 * m_1_2 + m_2_0 * m_2_0 + m_2_1 * m_2_1 ;

}
