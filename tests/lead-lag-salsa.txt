INPUTS {
	y	fl64	:	(0.0, 50.0) ;
	yd	fl64	:	(0.0, 50.0);
}

OUTPUTS {
	temp ;
}


EXPRS {

	e = 1.0 ;
	eps = 0.01 ;
	xc0 = 0.0;
	xc1 = 0.0 ;
	Cc0 = 564.48 ;
	Cc1 = 0.0;
	xc0 = 0.0;
	xc1 = 0.0;
	Dc  = -1280.0;
	Ac00 = 0.499;
	Ac01 = -0.05;
	Ac10 = 0.01;
	Ac11 = 1.0;
	Bc0 = 1.0 ;
	Bc1 = 0.0 ;


	if ( e > eps ) then
		v = y - yd ;
		temp_1 = 0.0;
		if ( v < -1.0) then
			temp_1 = -1.0;
		else
			temp_2 = 0.0;
			if ( v > 1.0) then
				temp_2 = 1.0;
			else
				temp_2 = v;
			endif
			temp_1 = temp_2 ;
		endif
		yc_1 = temp_1 ;
		u_1 = ((Cc0 * xc0) + ((Cc1 * xc1) + (Dc * yc_1)));
		xc0_1 = ((Ac00 * xc0) + ((Ac01 * xc1) + (Bc0 * yc_1)));
		xc1_1 = ((Ac10 * xc0_1) + ((Ac11 * xc1) + (Bc1 * yc_1)));
		if ( yc_1 - xc1_1 >= 0.0) then
		  e_1 = yc_1 - xc1_1 ;
		else
		  e_1 = xc1_1 - yc_1 ;
		endif
		temp_3 = 0.0 ;

		if ( e_1 > eps ) then
			v_1 = y - yd;
			temp_4 = 0.0 ;
			if ( v_1 < -1.0) then
				temp_4 = -1.0 ;
			else
				temp_5 = 0.0 ;
				if ( v_1 > 1.0) then
					temp_5 = 1.0;
				else
					temp_5 = v_1 ;
				endif
				temp_4 = temp_5 ;
			endif
			yc_2 = temp_4 ;
			u_2 = ((Cc0 * xc0_1) + ((Cc1 * xc1_1) + (Dc * yc_2)));
			xc0_2 = ((Ac00 * xc0_1) + ((Ac01 * xc1_1) + (Bc0 * yc_2)));
			xc1_2 = ((Ac10 * xc0_2) + ((Ac11 * xc1_1) + (Bc1 * yc_2)));
			if ( yc_2 - xc1_2 >= 0.0) then
				e_2 = yc_2 - xc1_2 ;
			else
				e_2 = xc1_2 - yc_2 ;
			endif
			temp_3 = xc1_2 ;
		else
			temp_3 = xc1_1 ;
		endif
		temp = temp_3 ;
	else
		temp = xc1 ;
	endif


}
