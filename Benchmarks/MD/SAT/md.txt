
INPUTS {
	# define the r matrix
	pos_0_0 fl64 : (2.96576467 - 0.1, 2.96576467 + 0.1) ;
	pos_0_1 fl64 : (1.55554506 - 0.1, 1.55554506 + 0.1) ;
	pos_0_2 fl64 : (8.7318717  - 0.1, 8.7318717  + 0.1) ;
	pos_0_3 fl64 : (9.60685819 - 0.1, 9.60685819 + 0.1) ;
	pos_0_4 fl64 : (5.04585064 - 0.1, 5.04585064 + 0.1) ;
	pos_0_5 fl64 : (8.56762706 - 0.1, 8.56762706 + 0.1) ;
	pos_0_6 fl64 : (8.46558311 - 0.1, 8.46558311 + 0.1) ;
	pos_0_7 fl64 : (4.61175653 - 0.1, 4.61175653 + 0.1) ;
	pos_0_8 fl64 : (2.10793524 - 0.1, 2.10793524 + 0.1) ;
	pos_0_8 fl64 : (6.05525898 - 0.1,6.05525898  + 0.1) ;
	pos_1_0 fl64 : (7.79206138 - 0.1, 7.79206138 + 0.1) ;
	pos_1_1 fl64 : (1.06761128 - 0.1, 1.06761128 + 0.1) ;
	pos_1_2 fl64 : (4.73776373 - 0.1, 4.73776373 + 0.1) ;
	pos_1_3 fl64 : (8.17558259 - 0.1, 8.17558259 + 0.1) ;
	pos_1_4 fl64 : (3.34272698 - 0.1, 3.34272698 + 0.1) ;
	pos_1_5 fl64 : (1.59506861 - 0.1, 1.59506861 + 0.1) ;
	pos_1_6 fl64 : (1.01654534 - 0.1, 1.01654534 + 0.1) ;
	pos_1_7 fl64 : (9.21235336 - 0.1, 9.21235336 + 0.1) ;
	pos_1_8 fl64 : (3.31820013 - 0.1, 3.31820013 + 0.1) ;
	pos_1_9 fl64 : (9.07753655 - 0.1, 9.07753655 + 0.1) ;
	pos_2_0 fl64 : (2.02297642 - 0.1, 2.02297642 + 0.1) ;
	pos_2_1 fl64 : (1.98961114 - 0.1, 1.98961114 + 0.1) ;
	pos_2_2 fl64 : (4.15677104 - 0.1, 4.15677104 + 0.1) ;
	pos_2_3 fl64 : (4.16465794 - 0.1, 4.16465794 + 0.1) ;
	pos_2_4 fl64 : (1.39446098 - 0.1, 1.39446098 + 0.1) ;
	pos_2_5 fl64 : (1.85090275 - 0.1, 1.85090275 + 0.1) ;
	pos_2_6 fl64 : (8.40598585 - 0.1, 8.40598585 + 0.1) ;
	pos_2_7 fl64 : (6.70569141 - 0.1, 6.70569141 + 0.1) ;
	pos_2_8 fl64 : (1.12255202 - 0.1, 1.12255202 + 0.1) ;
	pos_2_9 fl64 : (3.40419043 - 0.1, 3.40419043 + 0.1) ;
}

OUTPUTS {
	potential021 ;
}


EXPRS {
	d_num = 3.0 ;
	p_num = 10 ;
	step_num = 2 ;
	dt = 0.1 ;
	mass = 1.0 ;
	pi_by2 = 1.5707963267948966 ;

	#initialize(p_num, d_num)

	# step=0 -> initialize(p_num=10, d_num=3.0)  # d_num x p_num matrix r

		# compute ( p_num, d_num, pos, vel, mass )
		# i : 0->p_num-1; j : 0->d_num-1; i!=j
			# step=0; i=0; j=1
				r001_0 = pos_0_0 - pos_0_1 ;
				r001_1 = pos_1_0 - pos_1_1 ;
				r001_2 = pos_2_0 - pos_2_1 ;

				d001 = r001_0*r001_0 + r001_1*r001_1 + r001_2*r001_2 ;
				d001_sq_temp = sqrt(d001) ;
				if ( d001_sq_temp >= pi_by2 ) then
					d001_sq = pi_by2 ;
				else
					d001_sq = d001_sq_temp ;
				endif

				potential001 = 0.5 * sin(d001_sq) * sin(d001_sq) ;

				#i,j: force[k,i]
				force001_00 = 0.0 - r001_0 * sin(2.0 * d001_sq)/d001 ;
				force001_10 = 0.0 - r001_1 * sin(2.0 * d001_sq)/d001 ;
				force001_20 = 0.0 - r001_2 * sin(2.0 * d001_sq)/d001 ;

			# i=0; j=2
				r002_0 = pos_0_0 - pos_0_2 ;
				r002_1 = pos_1_0 - pos_1_2 ;
				r002_2 = pos_2_0 - pos_2_2 ;
				d002 = r002_0*r002_0 + r002_1*r002_1 + r002_2*r002_2 ;
				d002_sq_temp = sqrt(d002) ;
				if ( d002_sq_temp >= pi_by2 ) then
					d002_sq = pi_by2 ;
				else
					d002_sq = d002_sq_temp ;
				endif

				potential002 = potential001 + 0.5 * sin(d002_sq) * sin(d002_sq) ;
				force002_00 = force001_00 - r002_0 * sin(2.0 * d002_sq)/d002 ;
				force002_10 = force001_10 - r002_1 * sin(2.0 * d002_sq)/d002 ;
				force002_20 = force001_20 - r002_2 * sin(2.0 * d002_sq)/d002 ;


			# i=1; j=0
				r010_0 = pos_0_1 - pos_0_0 ;
				r010_1 = pos_1_1 - pos_1_0 ;
				r010_2 = pos_2_1 - pos_2_0 ;
				d010 = r010_0*r010_0 + r010_1*r010_1 + r010_2*r010_2 ;
				d010_sq_temp = sqrt(d010) ;
				if ( d010_sq_temp >= pi_by2 ) then
					d010_sq = pi_by2 ;
				else
					d010_sq = d010_sq_temp ;
				endif

				potential010 = potential002 + 0.5 * sin(d010_sq) * sin(d010_sq) ;
				force010_01 = 0.0 - r010_0 * sin(2.0 * d010_sq)/d010 ;
				force010_11 = 0.0 - r010_1 * sin(2.0 * d010_sq)/d010 ;
				force010_21 = 0.0 - r010_2 * sin(2.0 * d010_sq)/d010 ;


			# i=1; j=2
				r012_0 = pos_0_1 - pos_0_2 ;
				r012_1 = pos_1_1 - pos_1_2 ;
				r012_2 = pos_2_1 - pos_2_2 ;
				d012 = r012_0*r012_0 + r012_1*r012_1 + r012_2*r012_2 ;
				d012_sq_temp = sqrt(d012) ;
				if ( d012_sq_temp >= pi_by2 ) then
					d012_sq = pi_by2 ;
				else
					d012_sq = d012_sq_temp ;
				endif


				potential012 = potential010 + 0.5 * sin(d012_sq) * sin(d012_sq) ;
				force012_01 = force010_01 - r012_0 * sin(2.0 * d012_sq)/d012 ;
				force012_11 = force010_11 - r012_1 * sin(2.0 * d012_sq)/d012 ;
				force012_21 = force010_21 - r012_2 * sin(2.0 * d012_sq)/d012 ;

			# i=2; j=0
				r020_0 = pos_0_2 - pos_0_0 ;
				r020_1 = pos_1_2 - pos_1_0 ;
				r020_2 = pos_2_2 - pos_2_0 ;
				d020 = r020_0*r020_0 + r020_1*r020_1 + r020_2*r020_2 ;
				d020_sq_temp = sqrt(d020) ;

				if ( d020_sq_temp >= pi_by2 ) then
					d020_sq = pi_by2 ;
				else 
					d020_sq = d020_sq_temp ;
				endif

				potential020 = potential012 + 0.5 * sin(d020_sq) * sin(d020_sq) ;
				force020_02 = 0.0 - r020_0 * sin(2.0 * d020_sq)/d020 ;
				force020_12 = 0.0 - r020_1 * sin(2.0 * d020_sq)/d020 ;
				force020_22 = 0.0 - r020_2 * sin(2.0 * d020_sq)/d020 ;


			# i=2; j=1
				r021_0 = pos_0_2 - pos_0_1 ;
				r021_1 = pos_1_2 - pos_1_1 ;
				r021_2 = pos_2_2 - pos_2_1 ;
				d021 = r021_0*r021_0 + r021_1*r021_1 + r021_2*r021_2 ;
				d021_sq_temp = sqrt(d021) ;

				if (  d021_sq_temp >= pi_by2 ) then
					d021_sq = pi_by2 ;
				else
					d021_sq = d021_sq_temp ;
				endif


				potential021 = potential020 + 0.5 * sin(d021_sq) * sin(d021_sq) ;
				force021_02 = force020_02 - r020_0 * sin(2.0 * d020_sq)/d020 ;
				force021_12 = force020_12 - r020_1 * sin(2.0 * d020_sq)/d020 ;
				force021_22 = force020_22 - r020_2 * sin(2.0 * d020_sq)/d020 ;

		kinetic_0 = 0.0 ;

		# step=1
		# update ( p_num, d_num, pos, vel, force, acc, mass, dt)

		



	# step=1 -> update(p_num=10, d_num=3, pos, vel, force, acc, mass, dt)
		pos_upd1_0_0 = pos_0_0 ; pos_upd1_0_1 = pos_0_1 ;

}
